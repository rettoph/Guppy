using Guppy.GUI.ImGuiNETSourceGenerator.TypeManagers;
using ImGuiNET;
using Microsoft.CodeAnalysis;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Reflection;
using System.Reflection.Metadata;
using System.Text;

namespace Guppy.GUI.ImGuiNETSourceGenerator
{
    [Generator]
    internal class IImGuiServiceSourceGenerator : ISourceGenerator
    {
        public void Execute(GeneratorExecutionContext context)
        {
            MethodInfo[] methods = typeof(ImGui).GetMethods(BindingFlags.Static | BindingFlags.Public);

            StringBuilder source = new StringBuilder();
            source.AppendLine("// <auto-generated/>");
            source.AppendLine();

            source.AppendLine($"namespace {context.Compilation.AssemblyName}.Services");
            source.AppendLine("{");
                
                source.AppendLine("\tpublic partial interface IImGuiService");
                source.AppendLine("\t{");
            
                foreach(MethodInfo method in methods)
                {
                    TypeManager returnType = TypeManager.GetTypeManager(method.ReturnType);

                    (ParameterInfo parameter, TypeManager manager)[] parameterManagers = method.GetParameters()
                        .Select(x => (x, TypeManager.GetTypeManager(x.ParameterType)))
                        .ToArray();

                    string guppyMethodParameters = string.Join(", ", parameterManagers.Select(x => $"{x.parameter.GetPrefix()}{x.manager.GuppyParameterType} {x.parameter.Name.Sanitize()}"));
                    string imguiMethodParameters = string.Join(", ", parameterManagers.Select(x => $"{x.parameter.GetPrefix()}{x.manager.GetGuppyToImGuiConverter(x.parameter.Name.Sanitize())}"));

                    source.AppendLine($"\t\tunsafe {returnType.ReturnTypeName} {method.Name}({guppyMethodParameters})");
                    source.AppendLine("\t\t{");

                    if(method.ReturnType.IsVoid())
                    {
                        source.AppendLine($"\t\t\tImGuiNET.ImGui.{method.Name}({imguiMethodParameters});");
                    }
                    else
                    {
                        string returnPrefix = (method.ReturnType.IsByRef ? "ref " : "");
                        source.AppendLine($"\t\t\t{returnPrefix}{returnType.ImGuiType.FullName} result = ImGuiNET.ImGui.{method.Name}({imguiMethodParameters});");
                        source.AppendLine($"\t\t\treturn {returnPrefix}{returnType.GetImGuiToGuppyConverter("result")};");
                    
                    }

                    source.AppendLine("\t\t}");
                    source.AppendLine();
                }

                source.AppendLine("\t}");

            source.AppendLine("}");

            context.AddSource($"IImGuiService.g.cs", source.ToString());

            TypeManager.GenerateAllSourceFiles(ref context);
        }

        public void Initialize(GeneratorInitializationContext context)
        {
            //Debugger.Launch();
        }
    }
}
