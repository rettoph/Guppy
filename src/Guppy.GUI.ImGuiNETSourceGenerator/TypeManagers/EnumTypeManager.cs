using Microsoft.CodeAnalysis;
using System;
using System.Collections.Generic;
using System.Runtime.CompilerServices;
using System.Text;

namespace Guppy.GUI.ImGuiNETSourceGenerator.TypeManagers
{
    internal class EnumTypeManager : TypeManager
    {
        public EnumTypeManager(Type imGuiType) : base(imGuiType, imGuiType.Name)
        {
        }

        public override void GenerateSourceFiles(ref GeneratorExecutionContext context)
        {
            StringBuilder source = new StringBuilder();

            source.AppendLine("// <auto-generated/>");
            source.AppendLine();

            source.AppendLine($"using System.Runtime.CompilerServices;");
            source.AppendLine();

            source.AppendLine($"namespace {context.Compilation.AssemblyName}");
            source.AppendLine("{");

            source.AppendLine($"\tpublic enum {this.GuppyType}");
            source.AppendLine("\t{");

            string[] names = Enum.GetNames(this.ImGuiType);
            foreach (string name in names)
            {
                Enum value = (Enum)Enum.Parse(this.ImGuiType, name);
                var numericalValue = Convert.ChangeType(value, value.GetTypeCode());
                source.AppendLine($"\t\t{name} = {numericalValue},");
            }

            source.AppendLine("\t}");
            source.AppendLine();

            source.AppendLine($"\tinternal static class {this.GuppyType}Converter");
            source.AppendLine("\t{");

                source.AppendLine($"\t\tpublic static {this.ImGuiType.FullName} ConvertToImGui({this.GuppyType} value)");
                source.AppendLine("\t\t{");

                    source.AppendLine($"\t\t\treturn Unsafe.As<{this.GuppyType}, {this.ImGuiType.FullName}>(ref value);");

                source.AppendLine("\t\t}");

                source.AppendLine($"\t\tpublic static {this.GuppyType} ConvertToGuppy({this.ImGuiType.FullName} value)");
                source.AppendLine("\t\t{");

                    source.AppendLine($"\t\t\treturn Unsafe.As<{this.ImGuiType.FullName}, {this.GuppyType}>(ref value);");

                source.AppendLine("\t\t}");

            source.AppendLine("\t}");

            source.AppendLine("}");

            string sourceString = source.ToString();
            context.AddSource($"{this.GuppyType}.g.cs", sourceString);
        }

        public override string GetGuppyToImGuiConverter(string parameter)
        {
            return $"{this.GuppyType}Converter.ConvertToImGui({parameter})";
        }

        public override string GetImGuiToGuppyConverter(string parameter)
        {
            return $"{this.GuppyType}Converter.ConvertToGuppy({parameter})";
        }
    }
}
