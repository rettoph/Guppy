using System;
using System.Text;
using Microsoft.CodeAnalysis;

namespace Guppy.Game.ImGui.Common.ImGuiNETSourceGenerator
{
    public class CodeBuilder : IDisposable
    {
        private const string _targetNamspaceTag = "[TARGET_NAMESPACE]";
        private readonly StringBuilder _string = new StringBuilder();
        private int _depth = 0;
        private readonly IncrementalGeneratorInitializationContext _context;
        private string _fileName;

        public CodeBuilder(ref IncrementalGeneratorInitializationContext context)
        {
            this._context = context;
        }

        public CodeBuilder File(string filename)
        {
            this._fileName = filename;
            this._string.Clear();

            this.AppendLine("// <auto-generated/>");
            this.AppendLine();

            return this.Section($"namespace {_targetNamspaceTag}");
        }


        public CodeBuilder Section(string section = null)
        {
            if (section != null)
            {
                this.AppendLine(section);
            }

            this.AppendLine("{");
            this._depth++;

            return this;
        }

        public void AppendLine(string line = null)
        {
            if (line == null || line == string.Empty)
            {
                this._string.AppendLine();
                return;
            }

            this._string.Append(new string('\t', this._depth));
            this._string.AppendLine(line);
        }

        public void Dispose()
        {
            this._depth--;
            this.AppendLine("}");

            if (this._depth == 0 && this._fileName != null)
            {
                CodeBuilder.RegisterSourceOutput(this._context, this._fileName, this._string.ToString());
            }
        }

        public override string ToString()
        {
            return this._string.ToString();
        }

        private static void RegisterSourceOutput(
            IncrementalGeneratorInitializationContext context,
            string fileName,
            string content)
        {
            context.RegisterSourceOutput(context.CompilationProvider, (productionContext, compilation) =>
            {
                content = content.Replace(_targetNamspaceTag, compilation.AssemblyName);

                productionContext.AddSource(fileName, content);
            });
        }
    }
}